<<<<<<< HEAD
=============================================================================
List of generated methods in project: Crusher

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "M1pwm"     (component PWM)
   - M1pwm_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M1pwm_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M1pwm_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - M1pwm_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M1pwm_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "M2pwm"     (component PWM)
   - M2pwm_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M2pwm_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M2pwm_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - M2pwm_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M2pwm_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "M1bit"     (component BitIO)
   - M1bit_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - M1bit_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - M1bit_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - M1bit_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - M1bit_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "M2bit"     (component BitIO)
   - M2bit_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - M2bit_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - M2bit_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - M2bit_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - M2bit_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "SHARPadc"  (component ADC)
   - SHARPadc_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If 
                the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - SHARPadc_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of 
                the A/D converter.
   - SHARPadc_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "CMUserial" (component AsynchroSerial)
   - CMUserial_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - CMUserial_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - CMUserial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - CMUserial_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - CMUserial_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - CMUserial_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - CMUserial_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - CMUserial_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - CMUserial_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - CMUserial_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "BLUETOOTHserial" (component AsynchroSerial)
   - BLUETOOTHserial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code 
                (it does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because 
                the preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - BLUETOOTHserial_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) 
                SendChar method only stores data into an output buffer. In case of a zero output buffer size, only one 
                character can be stored. Enabling the component (Enable method) starts the transmission of the stored data. 
                This method is available only if the transmitter property is enabled.
   - BLUETOOTHserial_RecvBlock -If any data is received, this method returns the block of the data and its length (and 
                incidental error), otherwise it returns an error code (it does not wait for data).  This method is available 
                only if non-zero length of the input buffer is defined and the receiver property is enabled.  If less than 
                requested number of characters is received only the available data is copied from the receive buffer to the 
                user specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv 
                parameter is set to the number of received characters.
   - BLUETOOTHserial_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length 
                of the output buffer is defined and the transmitter property is enabled.
   - BLUETOOTHserial_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input 
                buffer is defined and the receiver property is enabled.
   - BLUETOOTHserial_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output 
                buffer is defined and the receiver property is enabled.
   - BLUETOOTHserial_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if 
                the receiver property is enabled.
   - BLUETOOTHserial_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if 
                the transmitter property is enabled.

Module "Cpu"       (component MCF51QE128_80)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
=======
=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "M1pwm"     (component PWM)
   - M1pwm_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M1pwm_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M1pwm_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - M1pwm_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M1pwm_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "M2pwm"     (component PWM)
   - M2pwm_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M2pwm_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M2pwm_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - M2pwm_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M2pwm_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "M1bit"     (component BitIO)
   - M1bit_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - M1bit_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - M1bit_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - M1bit_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - M1bit_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "M2bit"     (component BitIO)
   - M2bit_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - M2bit_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - M2bit_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - M2bit_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - M2bit_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "SHARPadc"  (component ADC)
   - SHARPadc_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, 
                this method switches on A/D converter device, voltage reference, etc.
   - SHARPadc_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off 
                A/D converter device, voltage reference, etc.
   - SHARPadc_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If 
                the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - SHARPadc_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of 
                the A/D converter.
   - SHARPadc_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "CMUserial" (component AsynchroSerial)
   - CMUserial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - CMUserial_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - CMUserial_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - CMUserial_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - CMUserial_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - CMUserial_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - CMUserial_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - CMUserial_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "BLUETOOTHserial" (component AsynchroSerial)
   - BLUETOOTHserial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code 
                (it does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because 
                the preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - BLUETOOTHserial_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) 
                SendChar method only stores data into an output buffer. In case of a zero output buffer size, only one 
                character can be stored. Enabling the component (Enable method) starts the transmission of the stored data. 
                This method is available only if the transmitter property is enabled.
   - BLUETOOTHserial_RecvBlock -If any data is received, this method returns the block of the data and its length (and 
                incidental error), otherwise it returns an error code (it does not wait for data).  This method is available 
                only if non-zero length of the input buffer is defined and the receiver property is enabled.  If less than 
                requested number of characters is received only the available data is copied from the receive buffer to the 
                user specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv 
                parameter is set to the number of received characters.
   - BLUETOOTHserial_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length 
                of the output buffer is defined and the transmitter property is enabled.
   - BLUETOOTHserial_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input 
                buffer is defined and the receiver property is enabled.
   - BLUETOOTHserial_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output 
                buffer is defined and the receiver property is enabled.
   - BLUETOOTHserial_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if 
                the receiver property is enabled.
   - BLUETOOTHserial_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if 
                the transmitter property is enabled.

Module "Bit1"      (component BitIO)
   - Bit1_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - Bit1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MCF51QE128_80)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
>>>>>>> ea0bd0d9b2499e4f1c87905294aa80942548715e
